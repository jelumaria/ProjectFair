        MERAN - TOPIC COVERED IN COURSE
    ----------------------------------------

------------------------------------------------
        HTML - Hyper Text Markup Languauge
------------------------------------------------

1. Markup Languauge : Rules used to define what  a document should contain.
2. HTML : used to display content in  a webpage
3. HTML documents consist of html elements
    - html elements : <starting-tag>contents</ending-tag>
4. HTML structure
    <html>
        <head>
            <title>Webpage Title</title>
        </head>
        <body>
            Contents to be displayed in webpage
        </body>
    </html>
5. HTML 5 
6. Basic Tags 
    - Heading : h1-h6 Tags
    - paragraph : p tag
    - bold : b tag
    - Itallics : em tag
    - HIghlight : mark tag
    - strike : s tag
    - superlative : sup tag
    - subscript :. sub tag
    - links : a tag
    - to break line : br tag
    - Ordered list : ol tag, li tag
    - Unordered list : ul tag, li tag
    - Description list : dl tag, dt tag, dd tag
    - Table : table tag, thead, tbody, tr , td, th tag
    - image : img tag
    - video : video tag
    - Container tags 
        - div tag
        - section tag
        - article tag
    - embedding content : iframe tag
    - User inputs :
        - form tag 
        - user input : input tags , radio button, checkbox, textarea
        - dropdown : select tag
        - Button : 
    - icon : i tag
7. Based on display value of tags in browser, we can classify tags
    - Block Elements : it use entire width of the browser to display content in browser
        - ex: h1-h6 tags, p tag, ul,ol,li
    - Inline elements : it use only width of the content to display content in browser
        - ex: a tag, img


------------------------------------------------
        CSS - Cascading Style Sheet
------------------------------------------------

1. Used to provide style to html elements
2. Applying CSS
    - Inline CSS : use style attribute
    - Internal CSS : use style tag
    - External CSS : use External css file to define style and link it with html page
3. CSS Selectors : used to select html elements to a css file
    - use tag name
    - use id
                The CSS id Selector
                The id selector uses the id attribute of an HTML element to select a specific element.

                The id of an element is unique within a page, so the id selector is used to select one unique element!

                To select an element with a specific id, write a hash (#) character, followed by the id of the element.
    - use class
                The CSS class Selector
                The class selector selects HTML elements with a specific class attribute.

                To select elements with a specific class, write a period (.) character, followed by the class name.
    - use universal Selector (*)
    - CSS Combinators
        - Grouping Selector (use comma to seperate each html elements)
        - Descendant Selector : use space
        - Child Selector : use >
        - Sibling Selector : use ~
        - Immeadiate Sibling Selector : use +
4. Box Model : 
    - Margin :The CSS margin properties are used to create space around elements, outside of any defined borders.
    - Padding : Padding is used to create space around an element's content, inside of any defined borders.


5. CSS Property
    - Float Property
    - Position Property
        - Static
        - Fixed
        - relative
        - absolute
        - sticky
    - Flex Box : used to display elements in row and column
        - Flex Container : set display as flex
            - justify-content
            - align-items
            - flex-direction
        - Flex Items
    - pseudo-class : is used to define a special state of an element.
        - syntax - selector:pseudo-class { property: value;}
    - Grid :  used to display elements in row and column, where user can fix coloumn width
        - grid Container : display as grid, 
            - grid-template-column / row : used to set width of column / row
            - gap : used to set space between row or column
        - grid items : 
    - linear-gradient : is used to set combinations of colors as background
        - syntax : background-image: linear-gradient(direction, color-stop1, color-stop2, ...);
    - Animation in CSS : animation property , to define animation in css, use @keyframes
        - Predifned Animation Libraries
            - animate : https://animate.style/
            - aos animation : https://michalsnik.github.io/aos/
            - locomotive scroll : 
6. Website Hosting : Web Server
    - Netlify
    - GitHub Pages
    - Vercel
7. Media Queries : Used to design responsive website
    - Media queries can be used to check many things, such as:
        - width and height of the viewport
        - orientation of the viewport (landscape or portrait)
        - resolution
    - use @media keyword : 
    @media not|only mediatype and (media feature) and (media feature) {
        CSS-Code;
    }
    - Screen breakpoints :
        - 480px - sm, 760px-md, 992px-lg, 1200px-xl


------------------------------------------------
            BOOTSTRAP - CSS FRAMEWORK
------------------------------------------------

1. Used Build fast, responsive sites
2. Predifned class of style, Comman BOOTSTRAP class
    - container / container-fluid
    - border
    - color : success / danger / warning / primary / info / dark / light / secondary
    - margin : m/mt/mb/me/ms-1/2/3/4/5
    - text-center/start/end
    - padding : p/pt/pb/pe/ps-1/2/3/4/5
    - text-color
    - image : img-fluid
    - width : w-25/50/75/100
    - fs-1/2/3/4/5
    - fw-bold/bolder
    - btn btn-color
    - flex - d-flex
    - input : form-control
    - grid 
        - row : maximum divided into 12 equal parts
        - col


------------------------------------------------
            TAILWIND CSS - CSS FRAMEWORK
------------------------------------------------

1. Rapidly build modern websites without ever leaving your HTML.

------------------------------------------------
                GIT & GITHUB
------------------------------------------------

1. GIT : used to control version of a code 
2. GIT Commands : 
    - git status : use to check status of git inside folder
    - git init : used to create / initiate git repository in a folder
    - git add . : used to track all untracked files to git 
    - git commit -m "message" : used to store / save tracked files to git 
    - git remote add origin github-repo-url : used to link git with github repository
    - git push origin master : used to push code from git to github repository
    - git remote remove origin : used to remove existing origin from git

------------------------------------------------
                FIGMA
------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------
js exectues line by line
; is not necessary for js
ctrl j to open terminal
--------------------------------------------
        JAVASCRIPT -  Programming Language
--------------------------------------------

    Dynamically programmed Language : typeof  the variable depends  upon the value assined to it
    1. node js is the run time environment for javascript : node filename.js
    2. basic Concept js : ECMA Script 6 /ES 6 es6 is used because it is used in react
        - display contents: console.log(content)
        - Data types :typeof keyword -used to identify the type of content
            : text :contents within a "" or ''
           primitive: - string - text 
                        - number - numbers or decimal
                        - boolean - true /false ie binary number indication
                        - undefined
            :non primitive: object ,array, function
        - combine differnt types of Data
            - use commas
            - use concantenation:use +    ;exception is that one content must be string and there will be no  space between them so to get space add a white space along with string
            by doing concantenation that all type of  data will be converted to string
            - using template literals: contents within back tick(``) is known as template literals.inside template literals variable are given using ${variable_name}
        - variable : used to store data
            - create variable: 3 ways:
                1. using var keywordm: syntax - var variablename/variable_name
                2. using const keywords : syntax - const variable_name=value
                3. using let keyword : syntax - let variable_name 
        - identifiers : set of rules to define variable name
        - Hoisting : can use variable before creating  it
        - differnce between var,const, let 
                  var                              const                                    let
            --------------------------------------------------------------------------------------------------------
            1. use var keyword                  use const keyword                        use let keyword
            2. can reassign its values          cannot reassign its value                can reassign its values
            3. global scope                     block scope                              block scope
            4. hoisted with a value             hoisted without a value                  hoisted without a value
        - operators in js
            - assignment operator: use =
            - Arithmeti operators: use + - * /  % **
            - relational operatores: > >= < <= != == ===:return a boolean value
            - logical operators: && || ! :return a boolean value
                    &&                        ||                  !
            -----------------------------------------------------------------
                T && T = T               T || T = T             !T = F 
                T && F = F               T || F = T             !F = T        
                F && T = F               F || T = T                          
                F && F = F               F || F = F
            
            - incerement/decrement operators: ++ --
            - shorthand operators: += -= *=
            - truthy operator - condition && statements executes when condition become true
            - ternary operator - condition && scopetatements executes when condition become true:statements executes when condition become false
            - spread operator - to expand iterating variable to a single array ,  use ... as its operator
            - rest operator- used to combine rest of the arguments/data into a single array , use ... as its operator
            
        - Decision making/ Conditional statements
            - if statements : syntax - if(condition){statements executes when condition become true}
            - if else statements : syntax - if(condition){statements executes when condition become true} else{statements executes when condition become false}
            - else if ladder
            - switch statements : 
               syntax - switch(condition){
                        case output1: statements
                        break;
                        default : statements
                        }

        - looping statements : used to repeat same task
            - while loop : syntax -
                1. initialise variable
                2. while(condition using the same  variable used to initialise){
                    statements to be executed when condition become true
                3. change value of the variable used in the condition
                }
            - for loop : syntax -
                for(initialise variable;condition using the same variable used to initialise;change valueof the variable used in the condition){
                    for body  statements to be executed when condition become true
                }
                - Break statements : used to break from loop condition
                - continue statements : used to skip loop for certain value in a loop
            - nested loop : a loop inside another loop
                - outer-loop{
                    inner-loop{
                        inner loop execution complete first
                    }
                }

        - functions : used to perform specific task in coding
            - 2 parts
                    - function definition : step to define task
                    - syntax : function function-name(arg1,arg2...argn){
                        define the function body
                    }
                    - function call: used to execte function definition
                    syntax : function-name(para1, para2...paran)
                 - return statements : used to  return  exection along with some values from a function definition to function call, place the return statementsat the end of the function definition
            - types of function 
                - predefined function : ex- console.log(conten) math.floor ,Number(string-value)
                - arrow functions : alternative of normal function definition
                    - syntax:var/const/let function-name:vy 0  (arg1,..argn)=>{define funtion body}
                - Callback function :  A function definition inside another function call
                    - function-name(function definition)
                - Anonymous function : nameless function, are self executing function,or a functioninside a callback funtion is call Anonymousfunction they exectue without being called
                - Recursive function : calling a function its own definition
                    - function fun-name(){funt-name()}
                - Nested function : a funtion definition inside another function definition
                -closure property: in a nested function ,child function can access parent variable_name but vise versa is not possible
        - Array : used to store multiple values in a variable
            - array methods : array-name.method()
                - push(value) : used to insert a value to the end of the an array
                - unshift(value) : used to insert a value to the beginning of the an array
                - pop() : used to remove value to the end of an array
                - shift() : used to remove value to the beginning of an array
                - sort(compareFn) : used to sort array
                - forEach(callbackFn) : used as an alternative for for-of loop, to iterate in an array
                - filter(callbackFn) : return a new array with values satisfying the condition applied on the existing array
                - find(callbackFn) : return the first values satisfying the condition applied on the existing array
                - map(callbackFn) : return a new array with values after appliying a mapping function to the existing array
                - reduce(callbackFn) : return either highest/lowest/ total of an existing array value after applaying a reduce function
                - reduceRight(callbackFn) : return either first highest/lowest/ total of an existing array value after applaying a reduce function
                - some(callbackFn) : return a boolean values which is based on the condition applied on the existing array,it return true if atleast one item satisfy the condition
                - every(callbackFn) : return a boolean values which is based on the condition applied on the existing array,it return true if all item satisfy the condition
                - flat(depth) : return new array with  reduced dimension of an existing array to its depth value  , if depth is onfinity then flat will always return one dimension array
                - includes(array-item) :return a booleanbased on aray value present in the existing array or not
                - indexOf(array-value) : return index corresponding to that item otherwise return -1
                - splice(index, deleteCount) : retrun a new array with removed items and it changes the existing array by removing/replacing items to be deleted with new one
                - reverse(): return a new array with reverse of an existing array
                - concat(item): return new array to join items with existing array
                - join(seperator): used to return string of array items seperated with given seperator
        - String : collection of characters within a single/double quotes
            - sting methods 
                - substring()
                - slice()
                - toUpperCase()
                - toLowerCase()
                - endswith()
                - trim()
                - includes()
        - Object : used to store data as key-value pair,to create an object
            {key1:value1,....}
            -to access value stored in an object
                - Bracket Notation : object-name["key"] used only when key is a variable
                - Dot Notation: object-name.key
            - to check a key is present in an object
                - use "in " operator, it return a boolean: syntax - "key" in object-name
                - hasOwnProperty()object method ,object-name.hasOwnProperty(key),it return a boolean
            - to insert a value in an existing object , using assign operator
                - object-name["key"] =value/object-name.key=value
                - Object.assign(destination,source)
            - to update value in an object : use assign operators
            -Object.keys(object-name) : return an array of  all keys stored in an object
            -Object.values(object-name) : return an array of  all values stored in an object
            - Object.entries(object-name) : used to  convert an object to an array
            - delete keyword : to remove a property from an object , syntax : delete object-name.key
            - destructure of an object : use to value of an object without using bracket or dot Notation
                - const{key1,key2,....key3}= object-name
        - Exception/Run time Handled in js : use Try-Catch block
        - OOPs : Object Oriented Programming
            - OOPs Concept
                - Class : blueprint of an object, has property, function . to create class use keyword 'class' & functions inside a class is known as methods , predefined method constructor in class used to initialise class properties
                - Object : real world entity ,used to access class properties/ function outside the class , 
                            syntax : new className()
                - Reference :"this" keyword is used to link class with its property as well as function
            - OOPs features
                - Inheritence : one class can extends properties/functions from another class
                    - classical Inheritence : Inheritence due to "extends" keyword
                    - prototype Inheritence : Inheritence due to "__proto__" keyword
                - Polymorphism :
                - Abstraction : hiding implementation detailes from user
                - Encapsulation
---------------------------------------------
        JAVASCRIPT -   FRONT END Concept
---------------------------------------------
    1. used to apply behaviour to HTML elements
    2. Ways to apply js in HTML
        - Internal JS :  define js code in script tag
        - External JS : external js link with HTML page using script tag
    3. DOM (Document Object Model ) : Tree structure has a single parent node corresponding to HTML page ,  using document js can access DOM
    4. DOM methods : used to access HTML elements into js
        - using tag : document.getElementByTagName("tag")
        - using id : document.getElementByid("id")/id
        - using class :  document.getElementByClassName("class")
        - using querySelector : document.querySelector("tag/#id/.class")
        - using querySelectorAll : document.querySelectorAll("tag/#id/.class")
    5. Events :Triggered by user action
        - Mouse related Events :click, drag , drop...
        - Keyboard related Events : key up, key down...
    6. Handling Events in HTML element: event-name="" , define behaviour occur to an element as 'function' in js code
    7. To access or update content of an HTML element using js :innerHTML/ innerText
    8. Permanent Data Storage of browser
        -store data as key and value pair ,type of key and value must be string, to conver a value to string we use JSON.Stringify(value) , to parse stringified data toits original for useJSON.parse(value)
        - local Storage
            - setItem(key,value) : used to store data in storage
            - getItem(key) : used to get data from storage
            - removeItem(key): used to delete data from storage
            - clear() : used to clear storage
        - session storage
    9. Working Browser JSRuntime environment
        - JavaScript Engine : It handle js code exection ,convert js code to codes that understood by the browser engine.
            - Call Stack : used to keep track of currently executing function,make sure each one finishes its execution before moving to next .only one call stack is present , that is the reason js is known as single threaded programming Language
                - can handle 2 types of functions
                    - synchronous function : function executes without any delay
                    - asynchronous function : function exectues with some delay
                        - Callback functions :  used to store in Task/Macrotask queue , functions like setTimeout(),user events(click,drag...)
                        - Web API : used to store in Microtsk queue , which is a priority queue
            - Event Loop :  it manages flow of code . It ensure working of user events & asynchronous operations to run smoothly ,it is an infinity loop, it monitor call stack , when stack become  empty event loop took task from Microtask queue to scack , once Microtask are complete then only it goes to task queue 
            - Heap :used to store variable and objects in js 
    10. Anonymous function : Handling using JS
        - Callback function : nesting of call function leads to 'callback hell' ,we won't get any response for this function
        - promise : used to resolve asynchronous function , we will definitily get a response ,  promise has 2 states
            - resolved state : if an asynchronous funtion was call, it will give you a response then that state of promise is known as resolved state . to get responsefrom resolved state we have to use 'then' method of promise
            - reject state : if an asynchronous function called , it won't give us a response then that state of promise is known as reject statem. to get the reason to reject the function for that we have to use 'catch' method of promise
            - Async-Await keywords : to resolve  promise easly without using callbackFn. async keyword will make a function return promise.we can use await inside async function for completing a promise.
    11. API(Application Programming Interface) : used to communicate between application within internet
        - based on communication between application we can categories API
            - REST / SOAP API : client-server Application
            - SOCKET : chatting Application
            - GRAPHQL
        API Testing Tool 
            -Postman
            - ThunderClient : an extention of vs code 
    12. URL(Uniform Resourse Locator) : 
        ex: https://jsonplaceholder.typicode.com/user/1
        - base URL : https://jsonplaceholder.typicode.com
        - URI (Uniform Resourse identifiers) : ex:https://jsonplaceholder.typicode.com/user
        - path parameter numbers associated with url
        - ex : https://in.search.yahoo.com/?fr2=inr
        - query parameter : values after ? in url
    13. HTTP (Hyper Text Transfer Protocol) :used to allow application to make request-response using  internet
        -HTTP request : client browser will always request
            -2 parts
                - HTTP header :to keep secret data
                - HTTP body : used to share data(binary ,string, .XML, json) from client to another app
            - Http Response : sever app will provide response to client browser
            -Http request method
                - GET :used to get / read data from an app
                - POST : used to create / save data
                - PUT : used to update data completely
                - PATCH: used to update data partially
                - DELETE : used to remove data
        - Http Response Status Code :numbers send with server http response
            - 1xx : Informational
            - 2xx : Success
            - 3xx : Redirectional
            - 4xx : Client error
            - 5xx : Server error
    14. JSON(Javascript Object Notation) : is a  data format used to transfer data from one app to another using internet , data format : data must be stored as key-value pair, here type of key must be string 
           .    
    15. API call in JS : AJAX(Asynchronous JavaScript & XML) - methods to make api using js
        - API Call using 'XMLHttpRequest'(XHR) class
            - XMLHttpRequest class has predefined methods  & properties which used to make 
            communication between application in internet
            - Object of XMLHttpRequest class , used to interact with server application
            - XMLHttpRequest class properties:
                - readyState : return a number which indicate current status of request , if ready state value ==4 then request recieves the response 
                - responseText : return string that contain the response to the request as text format
                - status : return response status code for the request
                - XMLHttpRequest class methods 
                    - open() : used to create/initialise request
                    - send() :used to send the request
                - Event
                    - onreadystatechange : it occurs whenever readyState changes , we will get response from the event
                - Steps to make api call using XHR
                    1. create object for XMLHttpRequest class
                    2. initialise request using open method
                    3. send request 
        - API Call using Fetch API : alternative for XHR , use fetch method ,it will return promise , every promise has two states .if state is resolved , response will get using then method of promise. if state rejected then response will get from catch method  
        - API call using Axios library: 
    16. JS module : used to transfer data from one js file to another, data must be exported from a js file and it must be imported before accessing data to another file
        - import and export statements 
            - export statements : to share a data from one js file that must be exported from it
            we can export data by 2 type   
                - using 'export default' keyword : export default can used only once in a file and it should use at the end of that file
                - using 'export' keyword : uses when multiple data are exported from a single js file
        - import statements : used to access data from one js file to  other, we can import generally in 2 types
            - import with curly braces : used for data exported using 'export' keyword
            - import without curly braces : used for data exported using 'export default' keyword

------------------------------------------------------------------
            REACT : Advanced FRONT END Application Library
    ------------------------------------------------------------------

    1. Basic React 
        - React App is a collection of different Libraries
        - React app is consist of different type of 'components', which used to display contents in browser, in react app, all the components are arranged in a tree structure. Tree structure has a single parent/root node which is by default known as 'App component'. , component are reusable. 
        - Pure JavaScript functions to built components, it return how to display contents in browser. pure function are capable of doing only one task with help of its arguments. function without side effects
        - Declarative approach
        - Virtual DOM : Light weight memory representation of real DOM. 
        - Babel Library : used to display contents in to browser
        - JSX (JavaScript XML) : JS extension for writing html code in JavaScript, used to display content in browser
            - JSX element : ex: const heading = <h1>Heading1</h1>
            - Rules for using JSX
                - Every JSX elements must be inside a single a tag. Parent tag can be any container tag ( div,section,article etc..) or react fragments ( <></> ) tag without name is known as react fragments.
                - In JSX we have to use 'camel case' to write contents : ex: fontSize
                - Every JSX code must has a closing tag. if a tag has contents then: <startingTag>contents</endingTag> , if a tag doesnot has content: <startingTag></endingTag> or we use self closing tag ( <startingTag/> ) as well
                - Instead of Attribute 'class' use 'className' in JSX
                - Instead of attribute 'for' use 'htmlFor' in JSX
                - in JSX , we can directly pass js code inside a curly braces. ex: {js code}
    2. React App Creation
        - CRA (using create-react-app command)
        - Vite : tool for building web Application
            - Installing vite globally : npm i -g create-vite
            - React app Creation using vite : npm create vite@latest reactAppName -- --template react
            - to run vite react project : use command- npm run dev 
            - to generate build folder to deploy react app using Netlify : npm run build
    3. File & Folder structure of React app using vite
        - package.json file : npm configuaration file for the project
        - package-lock.json file : used to hold version of dependent package of the project
        - eslint.config.js file : js configuaration file
        - .gitignore file : used to hold file & folder to be ignored while adding to git
        - node_modules folder : used to locally store dependent packages of project, we can generate node_modules folder with help of command 'npm install'
        - public folder : used to hold data that can accessed by any part of the project. 
        - index.html file : entry point of react Application, react app will display in index.html file
        - src folder : logic of react app is defined here
            - main.jsx file : define the logic to render ( displaying in browser ) react app in html element with id as 'root'
                - createRoot() : createRoot lets you create a root to display React components inside a browser DOM node.
            - css file : used to define style for all components in react app
            - App.jsx file : used to create react root component
            - assets folder : used to hold media files used in react project
    4. Components : are part of user interface.  used to display content in browser, to create component create a js/jsx file with filename start with capital letter
        - create react components in 2 types
            - Functional based / Stateless component : uses js pure function to build component, function name must similar to its filename. function must return jsx code 
            - Class based / state full component : uses class to create component. class inherit react component class. render method in class used to return jsx. 
                - to create state. it has to call super method in its constructor to get its parent features. state is an object, where we can store value as key-value pairs, to update the state use a predefined method setState() pass its argument as updated value of state.
        - Life Cycle Methods of React component
            - Mounting Phase : Putting JSX into DOM
                - constructor()
                - getDerivedStateFromProps()
                - render()
                - componentDidMount()
            - Updating Phase : When component get updated
                - getDerivedStateFromProps()
                - shouldComponentUpdate()
                - render()
                - getSnapshotBeforeUpdate()
                - componentDidUpdate()
            - Unmounting Phase : Removing component from DOM
                - componentWillUnmount()
        - Difference class based vs functionnal based component
            Class Based Components                      Functional based component
        ---------------------------------------     ------------------------------------------
        1. using class to create , render           1. using js pure function and return jsx
        method must return jsx
        2. Statefull component                      2. Stateless component
        3. Hooks are not used                       3. Hooks are used
        4. Need constructor to Initialise           4. No need of constructor
        state
        5. Life cycle methods are available         5. Life cycle methods not are available
    5. Data shairing between React Components
        - Data can be shared from parent to child : use 'props' object
    6. Props : is a property of a component. it is an object used to transfer data from parent component to child component, parent data can be shared via child tag attribute.  to access parent data in child we have to props. props used in the child component function argument. props cannot be changed
    7. Conditional Rendering : used based on condition rendering jsx elements in browser, using if-else statements (ternary operator ?:) / if statements (&& operator)
    8. List in React : use map array method. set key attribute to duplicating JSX element in a list. 
    9. CSS Styling in React : Different ways to apply css to JSX elements
        - using Inline CSS : using style attribute to apply style to jsx element, style must be as js object
            - syntax : style={{cssProperty:value,...}}
        - using External CSS : Define css style in an external css file. Link css file to component file using import statements. We cannot import css file into a variable in component file
            - import 'css file path'
        - using CSS Module file : file with extension as .module.css is known as css 'module file', In this we have to define style in class. To use module css file we have to import it to component file.
            - import variableName from 'module css file path', to apply style in component, use variableName.className
        - Important CSS Styling Compoenet Libraries
            - Material UI : npm install @mui/material @emotion/react @emotion/styled
            - React Bootstrap : npm install react-bootstrap bootstrap, Include bootstrap theme in order to apply bootstrap properly in react project , use https://bootswatch.com/ for selecting theme. Download bootstrap.min.css file of the theme and add that file inside project src folder. Import bootstrap.min.css file main.jsx file of project
            - Tailwind CSS : npm install -D tailwindcss postcss autoprefixer , npx tailwindcss init -p . use the guideline from yhe given link : https://tailwindcss.com/docs/guides/vite
    10. Events Handling in React : syntax - event={function call}
            - Binding function without arguments : event={functionName}
            - Binding function with arguments : event={()=>functionName(argument)}
            - Binding function with arguments as event : event={(event)=>functionName(event)}
    11. State in React : used to store data of a component. when state value changes component will re render
    13. Hooks in React : Predifned functions in react is known as hooks. Used to provide react component features to functionnal based component. All hooks name are starts with 'use' keyword. To use a hook in a functionnal component, it has to call the hook. 
        - Rules to use/call hooks in functionnal component
            - import hook in component file
            - to use hook in component call the hook in top level of component
            - Hooks cannot be Conditional
        - Based on react features there are different types hooks are available
            - Built in Hooks
                - useState(initial-value) hook : used to create state in functionnal component, this hook will return an array with 2 arguments.  first argument will the state , second argument is a function name used to update state. state updating function name generally start with 'set'.
                - useEffect(callbackFn,dependency) hook : used to apply side effcets to the functionnal component. we can pass side effect in its first aragument as  call back function, we can also pass an optional dependency argument to decide when to apply side effects in component
                    - dependency different values
                        - no value : side effcets will apply to the component all the the time, wihch leads to an infinite loop.
                        - empty array : side effcets will apply to the component only at the time of loading the component in DOM
                        - [state/props/variable_name] : side effcets will apply to the component not only at the time of loading of the component in DOM but also whenever the value of state/props/variable_name given in the dependency changes
                - useRef(initialValue) : is a React Hook that lets you reference a value that’s not needed for rendering. initialValue is optional in useRef hook, it return an object with 'current' key
                - useParams() : hook will return dynamic value of route associated with a component
                - useSelector() : hook used to select state from redux store
                - useDispatch() : hook used to dispatch action from a Compoenet
                - useNavigate() : hook used to navigate / redirect from one component to another
                - useContext() : hook used to access context in component
            - Custom Hooks : create js file to define a specific function for a special task. export the function from that file. function name must start with 'use' keyword
    14. Form Handling in React : there are 2 ways to Manage data inside the form by a component
        - Controlled Components : are component which store form data inside its own state
        - Uncontrolled components : component who access form data using its DOM elements reference 
        - preventDefault() : is automatically invoked when cancelable attribute value is true, then this function prevent it effect by setting it value as false. 
    15. Set up path/url for Component in React : use package 'react-router-dom'
        - install react-router-dom : npm i react-router-dom
        - steps to set up path/route/url for component
            1. Render the entire react app inside 'BrowserRouter' component of react-router-dom Library, provide this step inside main.jsx file
            2. Inorder to set up path for component, make sure each component must be inside 'Routes' Compoenet of react-router-dom Library, provide this step inside App.jsx file
            3. To set up path for component, use 'Route' component of react-router-dom Library. Route Compoenet has attributes like 'path' and 'element' inorder setup route for component. All Route component must be inside Routes component
        - Dynamic Routing : we can set up a dynamic / changing value in a url along : symbol, so react app will understand value along with a : is dynamic part of this url.
        - To set up Page not found url use path as * , its path must be set up at the end of all url in react app
        - useNavigate hook : is return a function which capable of redirecting one page to another from component
        - Link component is used to redirect from one page to another using jsx
    16. Higher Order Compoenets (HOC) : are component whose props argument will give another Compoenet, ex: Route component
    17. API Call in react :
        - Using Axios Library : install axios - npm i axios
        - To make http request using axios : axios(httpRequestconfig) method, axios.httpRequest() method
            - httpRequestconfig : is an predfined object with keys (method,url,data,headers)
        - Http response using axios will always return object with predefind keys (data(server response),status )
        - Create services folder inside src of your react app
    18. Data shairing between components in react
        - State Lifting : data shairing is using props. We will create a state in common parent of data to be shared Compoenets. share state updation function one component and state to another component.
        - REDUX : using state management library 
        - Context API : used share data from different Compoenets without using 'props'
            - This is an in built feature react to share data between any Components without using props and avoid props drilling
            - We can share data from one component to another component using react 'context' 
            - Steps to perform data shairing using context API
                - create a Compoenet inside the folder for performing data share using context, this Compoenet purpose is to share data via context
                - create context inside the component file and export the context, use 'createContext' method
                - inside component create data (state & state update function) to be shared via the context
                - context can share data using its 'Provider' property, as well as its 'value' property can share the data as object so that it can share it its child components
                - make context Compoenet as the 'root component' of our project  (inside the main.jsx file wrap root component inside context component), then only project components become 'children' of context component (to access project components inside context component it can use 'children' props)
                - children props used to access all children of a component at the same time
                - useContext hook : to access data from context in component
                    - const {value} = useContext(contxet)



    ------------------------------------------------------------------
                    JSON SERVER CREATION
    ------------------------------------------------------------------

    1. Create a server folder to store json file
    2. Create a package.json (npm configuaration file) file inside server folder : use command - npm init -y
    3. Install json-server package in server folder to run json file , use command to install json-server: npm i json-server / to get json-server stable version use command : npm i json-server@0.17.4
    4. Create json (db.json) file for storing project data. 
    5. To run json file and available in browser port use command in server folder : npx json-server db.json


    ------------------------------------------------------------------
                    JSON SERVER DEPLOYEMENT USING NODE JS
    ------------------------------------------------------------------

    1. Create a index.js inside server folder
    2. Update scripts key of package.json file with { "start": "node index.js" } and remove test key from it
    3. Create .gitignore file, to add node_modules inside it
    4. Define steps to run db.json file using json-server in index.js
        - import json-server
        - create a server for media player app in order to run our server app
        - create a middleware to convert json data to js
        - create a port for executing our app
        - set up route / path db.json file so that client can make the request
        - use middleware, route inside the server
        - run server using the given port
        - To execute our app we have use : 'node index.js' in terminal, so that we can see the output in localhost:3000


    ------------------------------------------------
            REDUX - STATE MANAGEMENT TOOL
    ------------------------------------------------

    1. A JS library for predictable and maintainable global state management, And to avoid props drilling
    2. Redux consist of 2 packages : npm install react-redux @reduxjs/toolkit
        - React-Redux : Official React bindings for Redux, npm install react-redux
        - Redux-Toolkit : The official, opinionated, batteries-included toolset for efficient Redux development , npm install @reduxjs/toolkit
    3. Important API used redux
        - configureStore() : used to create store for redux. 
            - steps to create redux store in react app
                - create a folder redux logic in src folder
                - Inside redux folder create a js file for creating redux store, call configureStore method and use reducers to hold the state to be shared / stored in store return redux store
            - To provide store to our react app use 'Provider' component of react-redux library. Provider component has 'store' attribute using it we can provide our store to react app. Inorder to do that make Provider component as the root component of our react app. Give these steps in main.jsx file
        - createReducer() : used to create reducers where we can store updated state inside store
        - createAction() : used to create action where we can define logic to update state , output of action automatically return to its reducer
        - createSlice() : used to combine action and reducer in a single file. return actions and reducer . it accept initial state, slice name, object of reducer where we can use key as 'action name' and its value as 'reducer function', reducer function has 2 aragument, first will always be initial state of slice, second argument is an object which contains data from dispatching action
            - steps slice for react app
                - create js file for defining slice 
                - createSlice method call where we have to define reducers as objects, its key act as action and its value act as reducer function it has  minimum one argument which gives slice state
        - createAsyncThunk() : used to make Asynchrounous call in an action in redux. It accept 2 arguments, first is action type string ("slice-name/action-name"), 2nd argument is a callback function it can return promise. it output can be 3 different types. pending state/fulfilled state/rejected state. 'ExtraReducers' in slice can handle promise return by an action. Because it has define different cases to update slice state, based on promise output. ExtraReducers can assign a function, it 1st argument (builder) can add cases for updating state according to each case.
    4. Hooks used in Compoenet for managing state using redux
        - useSelector(state=>state.reducer-name) : used to select state from store in a component, it return updated state store inside the store reducer key
        - useDispatch() : used to execute an action from a component. Hook will return a function that is capable of dispatching an action as its argument when we call the function
            - action without argument : dispatch-function(action-name())
            - action with argument : dispatch-function(action-name(arg1,...)) , to access argument of action in slice reduce function it uses its second argument which is an object with 2 key payload and type. payload will give the argument from action dispatched by a Compoenet


    ----------------------------------------------------------------------------
                            SERVER / BACKEND TECHNOLOGIES
    ----------------------------------------------------------------------------

    ------------------------------------------------
            MONGODB - DATABASE
    ------------------------------------------------

    1. DB are used to store and manage data permanently (MongoDB, SQL, MSAccess , Oracle etc..)
    2. MongoDB - Is a NoSQL DB. Document Oriented DB, where data are stored as JSON format ( {"key":value} ). It stored in memory as BSON format. 
    3. Collection : are used to store multiple JSON documents, to create a collection use its naming convention as always starts with small letter and it should be a plural 
    4. Difference between SQL & MongoDB
                    SQL                                             MongoDB
        ---------------------------------------------------------------------------------------
        1. Relational SQL DB                            1. Document Oriented NoSQL DB
        2. Data stored in Table, every table must has   2. Data stored Collections, as JSON document
        rows and fixed column   
        3. Uses a fixed schema                          3. Uses dynamic schema
        4. Support large number of Datatypes            4. Limited set of Datatypes
        5. Uses for traditional bussiness app           5. Used in bigdata & real time app
    5. MongoDB can used in different Environment
        - MongoDB Atlas : cloud version of MongoDB
        - MongoDB Enterprise : subscription based version self managed
        - MongoDB Community : open source version 
    6. MongoDB Shell / Mongosh : terminal where MongoDB commands are used
    7. Every document inside MongoDB has a unique key which is generated by MongoDB itself. it stored in "_id" and it value will be a string of hexadecimal numbers
    8. CRUD operations performed by MongoDB
        - find() : used to read all documents from a collection
        - findOne({key:value}) : used to read single document from a collection
        - insertOne({key:value}) : used to insert single document inside a collection
        - insertMany([{key:value}]) :  used to insert multiple documents inside a collection
        - countDocuments() : used to get total count of documents inside a collection
        - limit(count) : used to limit total document from a collection
        - skip(count) : used to skip documents while getting them from a collection
        - sort({key:1/-1}) : used to sort document , if value is 1 then ascending order -1 then descending order
        - Querying statements : used to get documents after applying query to collection. all Querying statements are preceded by $ symbol. ex: $gt,$gte,$lt,$lte.$eq,$neq,$exists,$regex. its syntax is 
        {key:{querying-statement:value}}
        - $expr : used to compare keys inside a document itself, syntax : {$expr:{querying-statement:["$key1","$key2"]}}
        - upadteOne({key:value},updated-Query) : used to update a single document from a collection, querying statements in update query as $set,$push,$pull.$inc
        - updateMany({key:value},updated-Query) : used to update multiple document from a collection,
        - deleteOne({key:value}) : used to delete a single document from a collection,
        - deleteMany(condition) : used to delete multiple document from a collection,
    9. Aggregation : used to join / combine two collection in a MongoDB DB
        - using $lookup : similar to left-outer join in SQL
        {
            $lookup:
                {
                from: <collection to join>,
                localField: <field from the input documents>,
                foreignField: <field from the documents of the "from" collection>,
                as: <output array field>
                }
        }


    ----------------------------------------------------------
                NODE JS - SERVER SIDE TECHNOLOGIES
    ----------------------------------------------------------

    1. Is a open source, cross platform runtime Environment to execute js file outside the browser, create servers (used to resolve client request) in a web app
    2. Features
        - Extremely fast
        - Asynchrounous function
        - Highly scalable
    3. Nodejs Global Objects : Objects can be accessed through out node app without importing it. ex: process objects, environmental objects ( used to store secret / configuaration data of a project )
    4. Nodejs Module system : used to share data between different file. it uses 'commonJSModule' system
        - for  import : it uses require('file path / package-name')
        - for export : 
            - to export default : use module.exports keyword
            - to export : use exports keyword
    5. Predfined / Built in module
        - fs Module : it consist of method for read/write data to a file in a system
        - http module : used to create server resolving http client request
        - https module : used to create server resolving https client request
        - events module : used to manage userdefined events
        - crypto module : used to protect data by encrypting 
    6. Execution Model : Event driven model and non blocking I/O, optimised Asynchrounous task
    7. API Access : access to system level API (file system, network , process)
    8. Working Node js : used to resolve client request from a browser and send the response  to client browser while Working with single thread. 
        - Non blocking I/O
        - Asynchrounous function
    9. Server setup
        - REST API - uses http Protocol (GET , POST , PUT ,DELETE)
        - JSON data should passed via http request body
        - CORS (Cross Origin Resource Shairing) Protocol used to enable data shairing between client & server


    ----------------------------------------------------------
            EXPRESS JS - SERVER FRAMEWORK for node js
    ----------------------------------------------------------

    1. uses for client-server Application , to create server with node js Features
    2. Steps to create express server for resolving client request
        - Create a folder for server Application
        - create package.json file inside server folder : use a command : npm init -y
        - update script key of package.json file as "start":"node index.js" and remove test key from it
        - Install packages needed to create server
            - express package : npm i express - used to create express server
            - cors packages : npm i cors - used to enable cors Protocol
            - dotenv packages : npm i dotenv - used to load content of .env file into process object
            - mongoose package : npm i mongoose - used to communicate between node & MongoDB
        - create .env file for storing environmental variable of the project
        - create .gitignore file for adding file / folder name inorder to ignore them while adding to git
        - create main entry of server which is index.js file in server folder, used to define server
        - Steps to create express server in index.js
            - import express, cors and dotenv
            - import db connection file
            - create express server, which is capable of resolving client request
            - use cors in express server, used to enable data shairing between server and client app
            - use json parser inside server app
            - use router inside server app
            - create PORT number for server app
            - listen server app in created PORT
            - run server app to make express app available created port : use the command in server terminal 'node index.js' / nodemon index.js
            - to http request using express server
                express-server.http-request(path,resolving function with 2 argument for request, response )
    3. MVC Architecture of Node Application
        - Controller : used to define logic to resolve client request
            - create a folder for controllers
                - create a js file for each controllers
                - define logic to resolve each request and export the same
                - import model in controllers
        - Routes : used to define route for each client request
            - create a folder for Routes in server
            - create js file to define route/ path / url where client can request
            - import express
            - create an object for Router class of express
            - using router object object we can define path in server app for client request
            - export router object and use it in server app
        - DB Connection with server app
            - install mongoose : npm i mongoose
            - create folder inside server app
            - create js file to define db Connection
            - import mongoose
            - get mongodb atlas connection string from .env
            - using mongoose connect method establish connection between server server and mongodb
            - import connection file inside index.js to execute connection
        - Model : used to communicate node js with db
            - create a folder inside server
            - create a js file to define model
            - import mongoose inside file
            - using mongoose create schema / structure for data to be stored model
            - create model using schema 
            - export model 
        - Middlewares : used to perform a task before executing its controllers
            - create folder inside server
            - create js file to define middleware and export middleware
            - use middleware in specific router
        - Handling uploaded file in server
            - install multer : npm i multer
            - create a folder to store uploaded files in server folder
            - create js file to handling uploading file using multer in middleware folder
            - defining storage space for uploaded file and use the storage in multer function and it return a multer instance which act as a middleware
            - export the multer instance
            - we will use multer middleware inside any route which handling uploaded file from request, multer middleware can handle single / multiple uploaded files
        - Exporting static file/folder from a server to internet using node js : server-name.use(url,express.static('folder/file-path')) in index.js file

    ----------------------------------------------------------------------------------
            MONGOOSE - node js package used to communicate with MongoDB & Nodejs
    ----------------------------------------------------------------------------------

    1. ODM (Object Data Modeling) for MongoDB to Nodejs
    2. Mongoose library is used to create and manage MongoDB document with Nodejs
    3. Install mongoose : npm i mongoose
    4. Schema : used to define structure of data to be stored in MongoDB, to create schema, create an object for mongoose Schema class
    5. Model : similar to collection of MongoDB , model will communicate controllers of  a node js app
    6. CRUD operation using mongoose
        - to create/insert a data in mongoose model for that we have to create object for model and pass its argument as data, to store model data permanently in MongoDB use mongoose 'save' method
        - read / get data : find() , findOne() , findById()
        - Update a data : updateOne(), updateMany() , findByIdAndUpdate()
        - delete a data : deleteOne() , deleteMany() , findByIdAndDelete()
    7. Querying statements used in mongoose : skip() , limit() , sort()


    ----------------------------------------------------------------------------------
                    JSON WEB TOKEN - USED TO AUTHORIZATION IN NODE JS
    ----------------------------------------------------------------------------------

    1. JSON Web Token (JWT) is an open standard (RFC 7519) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object.
    2. features 
        - Authorization
        - Information Exchange
    3. Structure of token : header.payload.signature
    4. To generate token : 
        - install jsonwebtoken : npm i jsonwebtoken
        - import jsonwebtoken 
        - use sign method to generate token : sign(payload,password)
        - payload : are used to store data inside the token
        - when user successfully login then generate token for Authorization 
    5. Verify token : use verify method use token and password used to generate token
        - if token verified then we will get an object as response with data stored in token its payload
        - if token verification is failed then we will get error


    ----------------------------------------------------------------------------------
                MIDDLEWARES : Controll request response cycle of Node js
    ----------------------------------------------------------------------------------

    1. They are function with 3 arguments, first is request, second is response and third is next. 
    2. Different types of middleware 
        - Application specific middleware , ex: express.json()
        - Router specific middleware : active for certain Routes
            - create a function with 3 arguments
    
    ----------------------------------------------------------------------------------
            MULTER : Middlewares used to handle multipart/form-data in Nodejs
    ----------------------------------------------------------------------------------

    1. Multer is a node.js middleware for handling multipart/form-data, which is primarily used for uploading files.
    2. Install multer : npm i multer
    3. Multer adds a body object and a file or files object to the request object. The body object contains the values of the text fields of the form, the file or files object contains the files uploaded via the form.
    4. multer can stored uploaded file  in server






















env









for each:one by one ayitu item iterate chyan , no return
filer :oru condition satisfy chyuna value mathram edukan.retuen full array with that condition
map:oro item one by one ayi edutitu  oru array ayi output kitan, return array
reduce :highest lowest,total sum



redux is used for managing states to avoid props drilling.redux has a global store,where state can be stored inside the reducer and the reducer will get the updated state  from actions. action can be executed by any component using use dispatch.the values or the state from a store  can be accessed by a component using useSelector hook

note
redux has a store ,reducers in store can store the state
data store chyune reduceril anu 
reduceril actionte output verune
slice :reducerum actionum combine chyan
components execute the action using useDispatch hook
components access the state in store using useSelector hook